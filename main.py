import json
import logging
from dotenv import load_dotenv
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters


load_dotenv()
TOKEN = os.getenv('TOKEN')

try:
    with open('educational_programs.json', 'r', encoding='utf-8') as f:
        PROGRAMS_DATA = json.load(f)
        print("JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω!")
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: –§–∞–π–ª educational_programs.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")

CHOOSE_EDUCATION_LEVEL, CHOOSE_SEARCH_METHOD, SHOW_PROGRAMS = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
    text = "üëã *–ü—Ä–∏–≤–µ—Ç!* \n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é " \
           "–æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. \n\n" \
           "üîé *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:*\n" \
           "/bachelor - –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç\n" \
           "/master - –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞\n" \
           "/doctorate - –î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞"
    await update.message.reply_text(text, parse_mode='Markdown')
    return CHOOSE_EDUCATION_LEVEL

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    text = "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n" \
           "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" \
           "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" \
           "/bachelor - –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç'\n" \
           "/master - –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞'\n" \
           "/doctorate - –í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è '–î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞'\n" \
           "/by_university - –ò—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤—É–∑–∞\n" \
           "/by_specialty - –ò—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
    await update.message.reply_text(text, parse_mode='Markdown')


async def choose_education_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞."""
    user_data = context.user_data
    user_data['education_level'] = update.message.text[1:]  
    text = "üîç *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:*\n" \
           "/by_university - –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤—É–∑–∞\n" \
           "/by_specialty - –ü–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
    await update.message.reply_text(text, parse_mode='Markdown')
    return CHOOSE_SEARCH_METHOD

async def choose_search_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞."""
    user_data = context.user_data
    user_data['search_method'] = update.message.text[1:] 

    if user_data['search_method'] == 'by_university':
        universities = sorted(set(program['name'] for program in PROGRAMS_DATA))
        text = "üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ –í–£–ó:*\n" + "\n".join(f"/{i} - {uni}" for i, uni in enumerate(universities))
        await update.message.reply_text(text, parse_mode='Markdown')
    elif user_data['search_method'] == 'by_specialty':
        text = "üìù *–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:*"
        await update.message.reply_text(text, parse_mode='Markdown')
    return SHOW_PROGRAMS

async def show_programs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞."""
    user_data = context.user_data
    education_level = user_data['education_level']
    search_method = user_data['search_method']

    if search_method == 'by_university':
        try:
            university_index = int(update.message.text[1:]) 
            university_name = list(set(program['name'] for program in PROGRAMS_DATA))[university_index]
            filtered_programs = [program for program in PROGRAMS_DATA if
                                 program['name'] == university_name and
                                 (
                                         (education_level == 'bachelor' and program.get('baccalaureate')) or
                                         (education_level == 'master' and program.get('magistracy')) or
                                         (education_level == 'doctorate' and program.get('doctorate'))
                                 )]
        except (ValueError, IndexError):
            filtered_programs = []

    elif search_method == 'by_specialty':
        search_query = update.message.text.lower()
        filtered_programs = [program for program in PROGRAMS_DATA if
                             search_query in program.get('baccalaureate_kz', '').lower() or
                             search_query in program.get('baccalaureate', '').lower() or
                             search_query in program.get('magistracy_kz', '').lower() or
                             search_query in program.get('magistracy', '').lower() or
                             search_query in program.get('doctorate_kz', '').lower() or
                             search_query in program.get('doctorate', '').lower()]
    else:
        filtered_programs = []

    if filtered_programs:
        text = "‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
        for program in filtered_programs:
            text += f"<b>{program['name']}</b>\n"  
            if education_level == 'bachelor':
                text += f"‚Ä¢ *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.get('baccalaureate', '')}\n"
            elif education_level == 'master':
                text += f"‚Ä¢ *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.get('magistracy', '')}\n"
            elif education_level == 'doctorate':
                text += f"‚Ä¢ *–ü—Ä–æ–≥—Ä–∞–º–º–∞:* {program.get('doctorate', '')}\n"
            text += f"‚Ä¢ *–ö–æ–¥:* <code>{program.get('name', '')}</code>\n\n"
        await update.message.reply_text(text, parse_mode='HTML')
    else:
        text = "üòî *–ü—Ä–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*"
        await update.message.reply_text(text, parse_mode='Markdown')
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TOKEN).build()

    #/help
    application.add_handler(CommandHandler("help", help_command))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_EDUCATION_LEVEL: [MessageHandler(filters.COMMAND, choose_education_level)],
            CHOOSE_SEARCH_METHOD: [MessageHandler(filters.COMMAND, choose_search_method)],
            SHOW_PROGRAMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_programs)],
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()